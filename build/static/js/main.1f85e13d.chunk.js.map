{"version":3,"sources":["components/Header.js","components/NewAppointment.js","components/Appointment.js","components/AppointmentsList.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","title","react_default","a","createElement","className","initialState","appointment","mascota","propietario","fecha","hora","sintomas","error","NewAppointment","state","handleChange","e","_this","setState","Object","objectSpread","defineProperty","target","name","value","handleSubmit","preventDefault","_this$state$appointme","newAppointment","id","uuid","props","createNewAppointment","this","action","onSubmit","htmlFor","type","placeholder","onChange","Component","Appointment","deleteAppointment","onClick","AppointmentsList","appointments","message","keys","length","map","components_Appointment","key","App","data","concat","toConsumableArray","filter","appointmentsLS","localStorage","getItem","JSON","parse","setItem","stringify","components_Header","components_NewAppointment","components_AppointmentsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f85e13d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({title}) => (  \n    <header>\n        <h1 className=\"text-center\">{title}</h1>\n    </header>\n);\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n}\n \nexport default Header;","import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst initialState = {\n    appointment: {\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    },\n    error: false\n}\n\nclass NewAppointment extends Component {\n    state = { ...initialState }\n\n    //cuando el usuario llena el form\n    handleChange = e => {\n        //update state segun el input\n        this.setState({\n            appointment: {\n                ...this.state.appointment,\n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    //cuando se envia el form\n    handleSubmit = e => {\n        e.preventDefault();\n\n        //extraer valores del state\n        const {mascota, propietario, fecha, hora, sintomas} = this.state.appointment;\n\n        //validar que todos los campos esten rellenados\n        if(mascota === '' | propietario==='' | fecha==='' | hora==='' | sintomas==='') {\n            this.setState({\n                error: true\n            });\n            return;\n        }\n        //generar objeto con los datos\n        const newAppointment = this.state.appointment;\n        newAppointment.id = uuid();\n        \n        //agregar cita al state de App\n        this.props.createNewAppointment(newAppointment);\n\n        //reiniciar state\n        this.setState({\n            ...initialState\n        })\n    }\n\n    render() { \n        const {error} = this.state;\n\n        return ( \n            <div className=\"card mt-5 py-4\">\n                <div className=\"card-body\">\n                    <h3 className=\"card-title text-center mb-5\">\n                        Llena el formulario para crear una nueva cita\n                    </h3>\n                    \n                    {error ? <div className=\"alert alert-danger mt-2 mb-5 text-center\"> Todos los campos son obligatórios!</div> : null}\n\n                    <form action=\"\" onSubmit={this.handleSubmit} >\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"\" className=\"col-sm-4 col-lg-2 col-form-label\">\n                                Nombre Mascota\n                            </label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control\"\n                                    placeholder='Nombre Mascota'\n                                    name='mascota'\n                                    onChange={this.handleChange}\n                                    value={this.state.appointment.mascota}\n                                    />\n                            </div>\n                        </div>{/* form-group */}\n\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"\" className=\"col-sm-4 col-lg-2 col-form-label\">\n                                Nombre Dueño\n                            </label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control\"\n                                    placeholder='Nombre Dueño Mascota'\n                                    name='propietario'\n                                    onChange={this.handleChange}\n                                    value={this.state.appointment.propietario}\n                                    />\n                            </div>\n                        </div>{/* form-group */}\n\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"\" className=\"col-sm-4 col-lg-2 col-form-label\">\n                                Fecha\n                            </label>\n                            <div className=\"col-sm-8 col-lg-4\">\n                                <input \n                                    type=\"date\" \n                                    className=\"form-control\"\n                                    name='fecha'\n                                    onChange={this.handleChange}\n                                    value={this.state.appointment.fecha}\n                                    />\n                            </div>\n\n                            <label htmlFor=\"\" className=\"col-sm-4 col-lg-2 col-form-label\">\n                                Hora\n                            </label>\n                            <div className=\"col-sm-8 col-lg-4\">\n                                <input \n                                    type=\"time\" \n                                    className=\"form-control\"\n                                    name='hora'\n                                    onChange={this.handleChange}\n                                    value={this.state.appointment.hora}\n                                    />\n                            </div>\n                        </div>{/* form-group */}\n\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"\" className=\"col-sm-4 col-lg-2 col-form-label\">\n                                Síntomas\n                            </label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <textarea \n                                    name=\"sintomas\" \n                                    className=\"form-control\" \n                                    placeholder=\"Describe los síntomas\"\n                                    onChange={this.handleChange}\n                                    value={this.state.appointment.sintomas}\n                                ></textarea>\n                            </div>\n                        </div>{/* form-group */}\n\n                        <input type=\"submit\" className=\"py-3 mt-2 btn btn-success btn-block\" value=\"Agregar nueva cita\"/>\n                    </form>  \n\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nNewAppointment.propTypes = {\n    createNewAppointment: PropTypes.func.isRequired\n}\n \nexport default NewAppointment;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Appointment = ({appointment, deleteAppointment}) => ( \n    <div className=\"media mt-3\">\n        <div className=\"media-body\">\n            <h5 className=\"mt-0\">{appointment.mascota}</h5>\n            <p className=\"card-text\"><span>Nombre Dueño: </span> {appointment.propietario} </p>\n            <p className=\"card-text\"><span>Fecha: </span> {appointment.fecha} </p>\n            <p className=\"card-text\"><span>Hora: </span> {appointment.hora} </p>\n            <p className=\"card-text\"><span>Síntomas: </span> </p>\n            <p className=\"card-text\"> {appointment.sintomas} </p>\n\n            <button \n                className=\"btn btn-danger\"\n                onClick={() => deleteAppointment(appointment.id)}\n            > Borrar &times; </button>\n        </div>\n    </div>\n);\n\nAppointment.propTypes = {\n    appointment: PropTypes.object.isRequired,\n    deleteAppointment: PropTypes.func.isRequired\n}\n \nexport default Appointment;","import React from 'react';\nimport Appointment from './Appointment';\nimport PropTypes from 'prop-types';\n\n\nconst AppointmentsList = ({appointments, deleteAppointment}) => {\n    \n    const message = Object.keys(appointments).length === 0 ? 'No hay citas.' : 'Administra tus citas aquí'\n    \n    return ( \n        <div className=\"card mt-2 py-5\">\n            <div className=\"card-body\">\n                <h4 className=\"card-title text-center\">{message}</h4>\n    \n                <div className=\"lista-citas\">\n                    {appointments.map(appointment => (\n                        <Appointment \n                            key={appointment.id}\n                            appointment={appointment}\n                            deleteAppointment={deleteAppointment}\n                        />\n                    ))}\n    \n                </div>\n            </div>\n    \n        </div> \n    );\n}\n\nAppointmentsList.propTypes = {\n    appointments: PropTypes.array.isRequired,\n    deleteAppointment: PropTypes.func.isRequired\n}\n \nexport default AppointmentsList;","import React, { Component } from 'react';\nimport './bootstrap.min.css'\nimport Header from './components/Header';\nimport NewAppointment from './components/NewAppointment';\nimport AppointmentsList from './components/AppointmentsList';\n\nclass App extends Component {\n  state = { \n    appointments: []\n  }\n\n  //cuando la app se ha cargado\n  componentDidMount(){\n    const appointmentsLS = localStorage.getItem('appointments');\n    if(appointmentsLS){\n      this.setState({\n        appointments: JSON.parse(appointmentsLS)\n      })\n    }\n  }\n\n  //cuando la app se actualiza (se elimina/crea una cita)\n  componentDidUpdate(){\n    localStorage.setItem('appointments', JSON.stringify(this.state.appointments));\n  }\n\n\n  createNewAppointment = data => {\n    const appointments = [...this.state.appointments, data];\n\n    this.setState({\n      appointments\n    })\n  }\n\n  deleteAppointment = id => {\n    \n    //copiar state de citas actual\n    const currentAppointments = [...this.state.appointments];\n\n    //filtrar por el elemento @id\n    const appointments = currentAppointments.filter(appointment => appointment.id !== id);\n\n    //actualizar state\n    this.setState({\n      appointments\n    })\n\n  }\n\n  render() { \n    return (\n      <div className=\"container\">\n        <Header title='Administrador Pacientes Veterinaria' />\n        <div className=\"row\">\n          <div className=\"col-md-12 mx-auto\">\n            <NewAppointment \n              createNewAppointment={this.createNewAppointment} \n            />\n            \n          </div>\n\n          <div className=\"mt-5 col-md-12 mx-auto\">\n            <AppointmentsList \n              appointments={this.state.appointments} \n              deleteAppointment={this.deleteAppointment}\n            />\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}